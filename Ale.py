# -*- coding: utf-8 -*-
# IW/Ferso8
# Form implementation generated from reading ui file 'Ale.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

#importación de Librerías
from PyQt5 import QtCore, QtGui, QtWidgets      #PyQT5 para el diseño del programa
import openpyxl                                 #openpyxl para la lectura de los archivos excel

book= openpyxl.load_workbook('./dt/data.xlsx',data_only=True)   #Lectura del archivo excel con la información
hoja=book.active                                                #se establece que se trbaja en la hoja predeterminada del excel

celdas= hoja['A2':'E225']                                       #delimitación de la información que se va a extraer del excel
#Arreglos donde se guardara indormación de los diferentes opciones del programa
lista=[]                #arreglo que guarda toda la información extraida del archivo excel   
cna=[]                  #arreglo que guarda los cantones seleccionados en la pantalla de concesión
cnau=[]                 #arreglo que guarda los cantones seleccionados en la pantalla de Uso temporal

#ciclo for para recorrer fila por fila en el arreglo celdas
for fila in celdas:                             
    datos= [celda.value for celda in fila]
    lista.append(datos)     #los datos de cada fila se guardan en el arreglo lista
    #print(lista)

#Class principal generada a través de QTdesigner
class Ui_MainWindow(object):
    #def predeterminado de PyQT5, van todos los elementos de la interfaz, asi como sus nombres, ubicación, color, etc
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(822, 721)
        MainWindow.setWindowTitle("")
        MainWindow.setAutoFillBackground(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(10, 10, 801, 691))
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.label_5 = QtWidgets.QLabel(self.tab)
        self.label_5.setGeometry(QtCore.QRect(230, 10, 271, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.label_3 = QtWidgets.QLabel(self.tab)
        self.label_3.setGeometry(QtCore.QRect(50, 70, 55, 16))
        self.label_3.setObjectName("label_3")
        self.ServiciosBox = QtWidgets.QComboBox(self.tab)
        self.ServiciosBox.setGeometry(QtCore.QRect(120, 70, 101, 22))
        self.ServiciosBox.setObjectName("ServiciosBox")                             
        self.ServiciosBox.addItems(['-',"a1(Radio AM)", "a1(Radio FM)", "a2(Tv)"])      #añade valores al comboBox de Servicios
        self.ServiciosBox.currentTextChanged.connect(self.gotoprov)                     #Cada que se elige un servicio se redirige la acción al def gotoprov
        self.label = QtWidgets.QLabel(self.tab)
        self.label.setGeometry(QtCore.QRect(50, 110, 55, 16))
        self.label.setObjectName("label")
        self.ProvinciasBox = QtWidgets.QComboBox(self.tab)
        self.ProvinciasBox.setGeometry(QtCore.QRect(120, 110, 181, 22))
        self.ProvinciasBox.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.ProvinciasBox.setObjectName("ProvinciasBox")
        self.ProvinciasBox.currentTextChanged.connect(self.gotocanton)                  #cuando se selecciona una provincia realiza la acción del def gotocanton 
        self.label_2 = QtWidgets.QLabel(self.tab)
        self.label_2.setGeometry(QtCore.QRect(50, 150, 55, 16))
        self.label_2.setObjectName("label_2")
        self.CantonesBox = QtWidgets.QComboBox(self.tab)
        self.CantonesBox.setGeometry(QtCore.QRect(120, 150, 181, 22))
        self.CantonesBox.setObjectName("CantonesBox")
        self.label_4 = QtWidgets.QLabel(self.tab)
        self.label_4.setGeometry(QtCore.QRect(360, 60, 91, 20))
        self.label_4.setObjectName("label_4")
        self.textYears = QtWidgets.QTextEdit(self.tab)
        self.textYears.setGeometry(QtCore.QRect(460, 50, 71, 31))
        self.textYears.setObjectName("textYears")
        self.textYears.setPlainText('0')
        self.CalcularButton = QtWidgets.QPushButton(self.tab)
        self.CalcularButton.setGeometry(QtCore.QRect(120, 240, 93, 28))
        self.CalcularButton.setObjectName("CalcularButton")
        self.CalcularButton.clicked.connect(self.calculoOtorgamiento)                   #acción botón Calcular, acción en el def calculoOtorgamiento
        self.label_6 = QtWidgets.QLabel(self.tab)
        self.label_6.setGeometry(QtCore.QRect(44, 290, 121, 20))
        self.label_6.setObjectName("label_6")
        self.textResultado = QtWidgets.QTextEdit(self.tab)
        self.textResultado.setGeometry(QtCore.QRect(170, 280, 101, 31))
        self.textResultado.setObjectName("textResultado")
        self.AddButton = QtWidgets.QPushButton(self.tab)
        self.AddButton.setGeometry(QtCore.QRect(120, 190, 93, 28))
        self.AddButton.setObjectName("AddButton")
        self.AddButton.clicked.connect(self.Cantonadd)                                  #acción botón Añadir, acción en el def Cantonadd
        self.label_7 = QtWidgets.QLabel(self.tab)
        self.label_7.setGeometry(QtCore.QRect(240, 370, 291, 31))
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.tab)
        self.label_8.setGeometry(QtCore.QRect(70, 470, 101, 16))
        self.label_8.setObjectName("label_8")
        self.textIngresomensual = QtWidgets.QTextEdit(self.tab)
        self.textIngresomensual.setGeometry(QtCore.QRect(170, 460, 121, 31))
        self.textIngresomensual.setObjectName("textIngresomensual")
        self.textIngresomensual.setPlainText('0')
        self.label_10 = QtWidgets.QLabel(self.tab)
        self.label_10.setGeometry(QtCore.QRect(80, 530, 91, 20))
        self.label_10.setObjectName("label_10")
        self.textTarifa = QtWidgets.QTextEdit(self.tab)
        self.textTarifa.setGeometry(QtCore.QRect(170, 530, 121, 31))
        self.textTarifa.setObjectName("textTarifa")
        self.TarifaButton = QtWidgets.QPushButton(self.tab)
        self.TarifaButton.setGeometry(QtCore.QRect(350, 480, 131, 28))
        self.TarifaButton.setObjectName("TarifaButton")
        self.TarifaButton.clicked.connect(self.TarifaMonth)                               #acción del botón Tarifa, accion conectada a def TarifaMonth
        self.textEditCantones1 = QtWidgets.QTextEdit(self.tab)
        self.textEditCantones1.setGeometry(QtCore.QRect(370, 90, 351, 231))
        self.textEditCantones1.setObjectName("textEditCantones1")
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.label_9 = QtWidgets.QLabel(self.tab_2)
        self.label_9.setGeometry(QtCore.QRect(250, 20, 291, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.label_11 = QtWidgets.QLabel(self.tab_2)
        self.label_11.setGeometry(QtCore.QRect(470, 70, 101, 16))
        self.label_11.setObjectName("label_11")
        self.textMesesuso = QtWidgets.QTextEdit(self.tab_2)
        self.textMesesuso.setGeometry(QtCore.QRect(570, 60, 111, 31))
        self.textMesesuso.setObjectName("textMesesuso")
        self.textMesesuso.setPlainText('0')
        self.label_12 = QtWidgets.QLabel(self.tab_2)
        self.label_12.setGeometry(QtCore.QRect(30, 390, 131, 20))
        self.label_12.setObjectName("label_12")
        self.textTemporal = QtWidgets.QTextEdit(self.tab_2)
        self.textTemporal.setGeometry(QtCore.QRect(160, 380, 131, 31))
        self.textTemporal.setObjectName("textTemporal")
        self.UsoServicioBox = QtWidgets.QComboBox(self.tab_2)
        self.UsoServicioBox.setGeometry(QtCore.QRect(120, 90, 100, 22))
        self.UsoServicioBox.setObjectName("UsoServicioBox")
        self.UsoServicioBox.addItems(['-',"a1(Radio AM)", "a1(Radio FM)", "a2(Tv)"])     #añade valores al combobox de servicios en uso temporal
        self.UsoServicioBox.currentTextChanged.connect(self.usoprov)                     #añade acción al seleccionar servicio, acción descrita en el def usoprov
        self.UsoProvinciasBox = QtWidgets.QComboBox(self.tab_2)
        self.UsoProvinciasBox.setGeometry(QtCore.QRect(120, 140, 161, 22))
        self.UsoProvinciasBox.setObjectName("UsoProvinciasBox")
        self.UsoProvinciasBox.currentTextChanged.connect(self.usocanton)                 #selecciona provincia realiza la acción descrita en el def usocanton
        self.UsoCantonBox = QtWidgets.QComboBox(self.tab_2)
        self.UsoCantonBox.setGeometry(QtCore.QRect(120, 190, 171, 22))
        self.UsoCantonBox.setObjectName("UsoCantonBox")
        self.TemporalButton = QtWidgets.QPushButton(self.tab_2)
        self.TemporalButton.setGeometry(QtCore.QRect(120, 330, 101, 28))
        self.TemporalButton.setObjectName("TemporalButton")
        self.TemporalButton.clicked.connect(self.UsoTemporal)                           #boton calcular usotemporal, realiza la acción descrita en def UsoTemporal
        self.label_13 = QtWidgets.QLabel(self.tab_2)
        self.label_13.setGeometry(QtCore.QRect(40, 90, 55, 16))
        self.label_13.setObjectName("label_13")
        self.label_14 = QtWidgets.QLabel(self.tab_2)
        self.label_14.setGeometry(QtCore.QRect(40, 140, 55, 16))
        self.label_14.setObjectName("label_14")
        self.label_15 = QtWidgets.QLabel(self.tab_2)
        self.label_15.setGeometry(QtCore.QRect(40, 190, 55, 16))
        self.label_15.setObjectName("label_15")
        self.UsoAddButton = QtWidgets.QPushButton(self.tab_2)
        self.UsoAddButton.setGeometry(QtCore.QRect(120, 250, 93, 28))
        self.UsoAddButton.setObjectName("UsoAddButton")
        self.UsoAddButton.clicked.connect(self.UsoCantonadd)                            #botón añadir cantón en pestaña uso temporal, realiza acción de def UsoCantonadd
        self.textEditCantonesUso = QtWidgets.QTextEdit(self.tab_2)
        self.textEditCantonesUso.setGeometry(QtCore.QRect(370, 120, 361, 241))
        self.textEditCantonesUso.setObjectName("textEditCantonesUso")
        self.tabWidget.addTab(self.tab_2, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        self.label_5.setText(_translate("MainWindow", "DERECHOS DE OTORGAMIENTO"))
        self.label_3.setText(_translate("MainWindow", "Servicio"))
        self.label.setText(_translate("MainWindow", "Provincia"))
        self.label_2.setText(_translate("MainWindow", "Cantón"))
        self.label_4.setText(_translate("MainWindow", "Duración(Años)"))
        self.CalcularButton.setText(_translate("MainWindow", "CALCULAR"))
        self.label_6.setText(_translate("MainWindow", "Costo Otrogamiento"))
        self.AddButton.setText(_translate("MainWindow", "Agregar"))
        self.label_7.setText(_translate("MainWindow", "TARIFAS MENSUALES POR USO DE FRECUENCIAS"))
        self.label_8.setText(_translate("MainWindow", "Ingreso Mensual"))
        self.label_10.setText(_translate("MainWindow", "Tarifa Mensual"))
        self.TarifaButton.setText(_translate("MainWindow", "Calcular Tarifa"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Derechos de Otorgamiento"))
        self.label_9.setText(_translate("MainWindow", "USO TEMPORAL DE FRECUENCIAS"))
        self.label_11.setText(_translate("MainWindow", "Tiempo (meses)"))
        self.label_12.setText(_translate("MainWindow", "Costo Uso Temporal"))
        self.TemporalButton.setText(_translate("MainWindow", "Calcular Uso"))
        self.label_13.setText(_translate("MainWindow", "Servicio"))
        self.label_14.setText(_translate("MainWindow", "Provincia"))
        self.label_15.setText(_translate("MainWindow", "Cantón"))
        self.UsoAddButton.setText(_translate("MainWindow", "Agregar C"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Uso Temporal de Frecuencias"))
    
    #def de paso a seleccionar cantón
    def gotocanton(self):
        self.CantonesBox.clear()                                 #limpia el comobobox de cantones
        provsel=self.ProvinciasBox.currentText()                 #toma el valor actual del combobox de provincias
        for p in lista:                                          
            if p[0]==provsel:                                    #busca la provincia seleccionada dentro de la información exraida de excel
                self.CantonesBox.addItem(p[1])                   #añade cada uno de los cantones de la provincia seleccionada en el combobox cantones
    
    #des de paso a seleccionar cantones pestaña UsoTemporal
    #funcionalidad identica a la función anterior
    def usocanton(self):
        self.UsoCantonBox.clear()
        usoprovsel=self.UsoProvinciasBox.currentText()
        for up in lista:
            if up[0]==usoprovsel:
                self.UsoCantonBox.addItem(up[1])

    #def de seleccionar provincia    
    def gotoprov(self):
        self.textEditCantones1.clear()  # cuando se ejecuta se limpia el espacio de texto
        cna.clear()                     #limpia el arreglo de cantones seleccionados anteriormente para un nuevo calculo
        self.ProvinciasBox.clear()
        #añade valores al combobox de provincias
        self.ProvinciasBox.addItems(['-','AZUAY', 'BOLIVAR', 'CAÑAR','CARCHI','COTOPAXI','CHIMBORAZO','EL ORO','ESMERALDAS','GUAYAS','IMBABURA','LOJA','LOS RIOS','MANABI','MORONA SANTIAGO','NAPO','PASTAZA','PICHINCHA','TUNGURAHUA','ZAMORA','GALAPAGOS','SUCUMBIOS','ORELLANA','SANTO DOMINGO','SANTA ELENA','NO DELIMITADAS'])
    
    #def usoprov para la pestaña UsoTemporal
    def usoprov(self):
        self.textEditCantonesUso.clear() 
        cnau.clear()                    #limpia el arreglo donde se guardaban los cantones del calculo anterior
        self.UsoProvinciasBox.clear()
        #añade valores al combobox de provincias en pestaña UsoTemporal
        self.UsoProvinciasBox.addItems(['-','AZUAY', 'BOLIVAR', 'CAÑAR','CARCHI','COTOPAXI','CHIMBORAZO','EL ORO','ESMERALDAS','GUAYAS','IMBABURA','LOJA','LOS RIOS','MANABI','MORONA SANTIAGO','NAPO','PASTAZA','PICHINCHA','TUNGURAHUA','ZAMORA','GALAPAGOS','SUCUMBIOS','ORELLANA','SANTO DOMINGO','SANTA ELENA','NO DELIMITADAS'])  
    
    def calculoOtorgamiento(self):
        sumot=0                                     #inicialización de la sumatoria para los calculos
        city=self.CantonesBox.currentText()         #toma el valor del box de cantones
        serv=self.ServiciosBox.currentText()        #toma el valor del box de servicios
        provsel=self.ProvinciasBox.currentText()    #toma el valor del box de provincias
        sbu=450                                     #valor para calculo
        t=int(self.textYears.toPlainText())         #toma valor del cuadro de texto de años
        for c in cna:                               #comprobación de servicio escogido para tomar valores de calculo
            if serv=='a1(Radio AM)':
                ABi=0.015
                ai=c[3]
            if serv=='a1(Radio FM)':
                ABi=0.22
                ai=c[3]
            if serv=='a2(Tv)':
                ABi=0.6
                ai=c[2]
            sumot=sumot+(ai*ABi)                    #realiza sumatoria de los indices de calculo de los cantones seleccionados 
        pago= sbu*t*(sumot)                     #realiza el calculo del valor de otorgamiento de frecuencias
        pagoot=round(pago, 2)                   #paso del valor a sólo 2 décimas
        print(sumot)                            
        self.textResultado.setPlainText(str(pagoot))    #imprime el valor de pago en el cuadro de texto de la interfaz
        
    def TarifaMonth(self):
        sumtm=0                                             #inicialización de la sumatoria
        ingm=int(self.textIngresomensual.toPlainText())     #toma el valor de ingreso mensual esperado
        city=self.CantonesBox.currentText()                 #toma el valor del box canton
        serv=self.ServiciosBox.currentText()                #toma el valor del box de servicio
        provsel=self.ProvinciasBox.currentText()            #toma el valor del box de provincias
        k=0.01                                              #variable para calculo
        for tm in cna:                                      #ciclo para comprobar el servicio y tomar valores de cálculo
            if serv=='a1(Radio AM)':
                B=6233
                ai=tm[3]
            if serv=='a1(Radio FM)':
                B=1407
                ai=tm[3]
            if serv=='a2(Tv)':
                B=1407
                ai=tm[2]
            poblacion=tm[4]                                 #toma el valor de población de cada canton seleccionado
            sumtm= sumtm + (ai *(poblacion/B))              #calculo de la sumatoria

        tfm= sumtm+(k*ingm)                             #cálculo de la tarifa mensual 
        pagotm=round(tfm, 2)                            #paso del valor a 2 décimas
        self.textTarifa.setPlainText(str(pagotm))       #imprime valor en el cuadro de texto de resultado
    
    def UsoTemporal(self):
        #self.textEditCantonesUso.clear()                #limpia el texto de los cantones seleccionados del calculo pasado de la pantalla UsoTemporal
        sumut=0                                         #inicia valor de sumatoria
        usocity=self.UsoCantonBox.currentText()         #toma el valor del box cantonesuso
        usoserv=self.UsoServicioBox.currentText()       #toma valor del box servicios uso
        usoprovsel=self.UsoProvinciasBox.currentText()  #toma valor del box provincias uso
        times=int(self.textMesesuso.toPlainText())      #toma el valor de tiempo en meses de uso temporal
        for utemp in cnau:                              #ciclo para comprobar el servicio escogido
            if usoserv=='a1(Radio AM)':
                uB=6233
                uai=utemp[3]
            if usoserv=='a1(Radio FM)':
                uB=1407
                uai=utemp[3]
            if usoserv=='a2(Tv)':
                uB=1407
                uai=utemp[2]
                    
            upoblacion=utemp[4]                         #valor de población del canton escogido
            sumut=sumut+(uai*(upoblacion/uB))           #realiza la sumatoria de los valores de cada canton
        UsoTemp= sumut*times                            #realiza el cálculo de uso temporal
        pagout=round(UsoTemp, 2)                        #paso del valor cálculado a sólo 2 décimas
        self.textTemporal.setPlainText(str(pagout))     #imprime el valor del cálculo en el cuadro de texto de resultado
        cnau.clear() 
    
    #def para añadir cantones
    def Cantonadd(self):
        city=self.CantonesBox.currentText()             #toma valor del box cantones
        provsel=self.ProvinciasBox.currentText()        #toma valor del box provincias
        for sel in lista:                               #ciclo para comprobar provincia y cantón escogido
            if sel[0]==provsel:                         #if para comprobar provincia
                if sel[1]==city:                            #if para comprobar ciudad
                    cna.append(sel)                         #guarda en un arreglo los cantones escogidos
                    self.textEditCantones1.insertPlainText(f"{sel[0]} - {sel[1]}\n")    #inserta en el cuadro de texto los cantones elegidos
                
    #def añadir cantones en la pestaña UsoTemporal es identico al def anterior(Cantonadd)   
    def UsoCantonadd(self):
        usocity=self.UsoCantonBox.currentText()
        usoprovsel=self.UsoProvinciasBox.currentText()
        for usel in lista:
            if usel[0]==usoprovsel:
                if usel[1]==usocity:
                    cnau.append(usel)
                    self.textEditCantonesUso.insertPlainText(f"{usel[0]} - {usel[1]}\n")
                    
  

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
